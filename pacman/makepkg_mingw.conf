#
# /etc/makepkg_mingw.conf
#

#########################################################################
# SOURCE ACQUISITION
#########################################################################
#
#-- The download utilities that makepkg should use to acquire sources
#  Format: 'protocol::agent'
DLAGENTS=('file::/usr/bin/curl -qgC - -o %o %u'
          'ftp::/usr/bin/curl -qgfC - --ftp-pasv --retry 3 --retry-delay 3 -o %o %u'
          'http::/usr/bin/curl -qgb "" -fLC - --retry 3 --retry-delay 3 -o %o %u'
          'https::/usr/bin/curl -qgb "" -fLC - --retry 3 --retry-delay 3 -o %o %u'
          'rsync::/usr/bin/rsync --no-motd -z %u %o'
          'scp::/usr/bin/scp -C %u %o')

# Other common tools:
# /usr/bin/snarf
# /usr/bin/lftpget -c
# /usr/bin/wget

#-- The package required by makepkg to download VCS sources
#  Format: 'protocol::package'
VCSCLIENTS=('bzr::breezy'
            'fossil::fossil'
            'git::git'
            'hg::mercurial'
            'svn::subversion')

#########################################################################
# ARCHITECTURE, COMPILE FLAGS
#########################################################################
#

if [[ "$MSYSTEM" == "MINGW64" ]]; then
  CARCH="x86_64"
  CHOST="x86_64-w64-mingw32"
  MINGW_CHOST="x86_64-w64-mingw32"
  MINGW_PREFIX="/mingw64"
  MINGW_PACKAGE_PREFIX="mingw-w64-x86_64"
  CC="gcc"
  CXX="g++"
  CPPFLAGS=
  CFLAGS="-march=nocona -msahf -mtune=generic -O2 -pipe -Wp,-D_FORTIFY_SOURCE=2 -fstack-protector-strong -Wp,-D__USE_MINGW_ANSI_STDIO=1"
  CXXFLAGS="$CFLAGS"
  LDFLAGS=""
  RUSTFLAGS="-Cforce-frame-pointers=yes"
elif [[ "$MSYSTEM" == "MINGW32" ]]; then
  CARCH="i686"
  CHOST="i686-w64-mingw32"
  MINGW_CHOST="i686-w64-mingw32"
  MINGW_PREFIX="/mingw32"
  MINGW_PACKAGE_PREFIX="mingw-w64-i686"
  CC="gcc"
  CXX="g++"
  CPPFLAGS=
  CFLAGS="-march=pentium4 -mtune=generic -O2 -pipe -Wp,-D_FORTIFY_SOURCE=2 -fstack-protector-strong -Wp,-D__USE_MINGW_ANSI_STDIO=1"
  CXXFLAGS="$CFLAGS"
  LDFLAGS="-Wl,--no-seh -Wl,--large-address-aware"
  RUSTFLAGS="-Cforce-frame-pointers=yes"
elif [[ "$MSYSTEM" == "CLANG64" ]]; then
  CARCH="x86_64"
  CHOST="x86_64-w64-mingw32"
  MINGW_CHOST="x86_64-w64-mingw32"
  MINGW_PREFIX="/clang64"
  MINGW_PACKAGE_PREFIX="mingw-w64-clang-x86_64"
  CC="clang"
  CXX="clang++"
  CPPFLAGS=
  CFLAGS="-march=nocona -msahf -mtune=generic -O2 -pipe -Wp,-D_FORTIFY_SOURCE=2 -fstack-protector-strong -Wp,-D__USE_MINGW_ANSI_STDIO=1"
  CXXFLAGS="$CFLAGS"
  LDFLAGS=""
  RUSTFLAGS="-Cforce-frame-pointers=yes"
elif [[ "$MSYSTEM" == "CLANGARM64" ]]; then
  CARCH="aarch64"
  CHOST="aarch64-w64-mingw32"
  MINGW_CHOST="aarch64-w64-mingw32"
  MINGW_PREFIX="/clangarm64"
  MINGW_PACKAGE_PREFIX="mingw-w64-clang-aarch64"
  CC="clang"
  CXX="clang++"
  CPPFLAGS=
  CFLAGS="-O2 -pipe -Wp,-D_FORTIFY_SOURCE=2 -fstack-protector-strong -Wp,-D__USE_MINGW_ANSI_STDIO=1"
  CXXFLAGS="$CFLAGS"
  LDFLAGS=""
  RUSTFLAGS="-Cforce-frame-pointers=yes"
elif [[ "$MSYSTEM" == "UCRT64" ]]; then
  CARCH="x86_64"
  CHOST="x86_64-w64-mingw32"
  MINGW_CHOST="x86_64-w64-mingw32"
  MINGW_PREFIX="/ucrt64"
  MINGW_PACKAGE_PREFIX="mingw-w64-ucrt-x86_64"
  CC="gcc"
  CXX="g++"
  CPPFLAGS=
  CFLAGS="-march=nocona -msahf -mtune=generic -O2 -pipe -Wp,-D_FORTIFY_SOURCE=2 -fstack-protector-strong -Wp,-D__USE_MINGW_ANSI_STDIO=1"
  CXXFLAGS="$CFLAGS"
  LDFLAGS=""
  RUSTFLAGS="-Cforce-frame-pointers=yes"
else
  echo "Unsupported MSYSTEM: $MSYSTEM"
  exit 1
fi

# DirectX compatibility environment variable
DXSDK_DIR=${MINGW_PREFIX}/${MINGW_CHOST}

#-- Make Flags: change this for DistCC/SMP systems
MAKEFLAGS="-j$(($(nproc)+1))"
#-- Debugging flags
DEBUG_CFLAGS="-ggdb -Og"
DEBUG_CXXFLAGS="-ggdb -Og"

ACLOCAL_PATH="${MINGW_PREFIX}/share/aclocal:/usr/share/aclocal"
PKG_CONFIG_PATH="${MINGW_PREFIX}/lib/pkgconfig:${MINGW_PREFIX}/share/pkgconfig"

#########################################################################
# BUILD ENVIRONMENT
#########################################################################
#
# Makepkg defaults: BUILDENV=(!distcc !color !ccache check !sign)
#  A negated environment option will do the opposite of the comments below.
#
#-- distcc:   Use the Distributed C/C++/ObjC compiler
#-- color:    Colorize output messages
#-- ccache:   Use ccache to cache compilation
#-- check:    Run the check() function if present in the PKGBUILD
#-- sign:     Generate PGP signature file
#
BUILDENV=(!distcc color !ccache check !sign)
#
#-- If using DistCC, your MAKEFLAGS will also need modification. In addition,
#-- specify a space-delimited list of hosts running in the DistCC cluster.
#DISTCC_HOSTS=""
#
#-- Specify a directory for package building.
#BUILDDIR=/tmp/makepkg

#########################################################################
# GLOBAL PACKAGE OPTIONS
#   These are default values for the options=() settings
#########################################################################
#
# Makepkg defaults:
# OPTIONS=(!strip docs libtool staticlibs emptydirs !zipman !purge !debug !lto !autodeps)
#  A negated option will do the opposite of the comments below.
#
#-- strip:      Strip symbols from binaries/libraries
#-- docs:       Save doc directories specified by DOC_DIRS
#-- libtool:    Leave libtool (.la) files in packages
#-- staticlibs: Leave static library (.a) files in packages
#-- emptydirs:  Leave empty directories in packages
#-- zipman:     Compress manual (man and info) pages in MAN_DIRS with gzip
#-- purge:      Remove files specified by PURGE_TARGETS
#-- debug:      Add debugging flags as specified in DEBUG_* variables
#-- lto:        Add compile flags for building with link time optimization
#-- autodeps:   Automatically add depends/provides
#
OPTIONS=(strip docs !libtool staticlibs emptydirs zipman purge !debug !lto !autodeps)

#-- File integrity checks to use. Valid: ck, md5, sha1, sha224, sha256, sha384, sha512, b2
INTEGRITY_CHECK=(sha256)
#-- Options to be used when stripping binaries. See `man strip' for details.
STRIP_BINARIES="--strip-all"
#-- Options to be used when stripping shared libraries. See `man strip' for details.
STRIP_SHARED="--strip-unneeded"
#-- Options to be used when stripping static libraries. See `man strip' for details.
STRIP_STATIC="--strip-debug"
#-- Manual (man and info) directories to compress (if zipman is specified)
MAN_DIRS=("${MINGW_PREFIX#/}"{{,/local}{,/share},/opt/*}/{man,info})
#-- Doc directories to remove (if !docs is specified)
DOC_DIRS=("${MINGW_PREFIX#/}"/{,local/}{,share/}{doc,gtk-doc})
#-- Files to be removed from all packages (if purge is specified)
PURGE_TARGETS=("${MINGW_PREFIX#/}"/{,share}/info/dir .packlist *.pod)
#-- Directory to store source code in for debug packages
DBGSRCDIR="${MINGW_PREFIX}/src/debug"
#-- Prefix and directories for library autodeps
LIB_DIRS=("lib:${MINGW_PREFIX#/}/lib" "lib32:${MINGW_PREFIX#/}/lib32")

#########################################################################
# PACKAGE OUTPUT
#########################################################################
#
# Default: put built package and cached source in build directory
#
#-- Destination: specify a fixed directory where all packages will be placed
#PKGDEST=/var/packages-mingw64
#-- Source cache: specify a fixed directory where source files will be cached
#SRCDEST=/var/sources
#-- Source packages: specify a fixed directory where all src packages will be placed
#SRCPKGDEST=/var/srcpackages-mingw64
#-- Log files: specify a fixed directory where all log files will be placed
#LOGDEST=/var/makepkglogs
#-- Packager: name/email of the person or organization building packages
#PACKAGER="John Doe <john@doe.com>"
#-- Specify a key to use for package signing
#GPGKEY=""

#########################################################################
# COMPRESSION DEFAULTS
#########################################################################
#
COMPRESSGZ=(gzip -c -f -n)
COMPRESSBZ2=(bzip2 -c -f)
COMPRESSXZ=(xz -c -z -T0 -)
COMPRESSZST=(zstd -c -T0 --ultra -20 -)
COMPRESSLRZ=(lrzip -q)
COMPRESSLZO=(lzop -q)
COMPRESSZ=(compress -c -f)
COMPRESSLZ4=(lz4 -q)
COMPRESSLZ=(lzip -c -f)

#########################################################################
# EXTENSION DEFAULTS
#########################################################################
#
PKGEXT='.pkg.tar.zst'
SRCEXT='.src.tar.zst'

#########################################################################
# OTHER
#########################################################################
#
#-- Command used to run pacman as root, instead of trying sudo and su
PACMAN_AUTH=()
