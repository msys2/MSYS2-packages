# This PKGBUILD is derived from one found on the AUR and includes patches contributed by gisburn.
pkgname=ksh93
pkgver=1.0.10
pkgrel=1
pkgdesc="The Original ATT Korn Shell, Now Maintained By The Community."
arch=('i686' 'x86_64')
url="https://www.github.com/ksh93/ksh"
license=('spdx:EPL-2.0')
makedepends=('gcc' 'binutils' 'bison' 'libintl' 'ncurses-devel' 'texinfo')

# There exists already a package that provides ksh.exe, mksh, so I will set this to be a conflict.
# Unless there can be a convincing reason to let both packages be installed.
conflicts=('mksh')

source=("${pkgname}-${pkgver}.zip"::https://github.com/ksh93/ksh/archive/refs/tags/v1.0.10.zip
  'ksh.kshrc'
  'ksh-unc-paths.patch')

sha256sums=('ab412118ce9527c6d805335080593fa874a0b859e9229c172f3fcf55d26f92e9'
  'SKIP'
  '4838b950e32fc61dbfbb5e446570f4f7503f302a26305dff1f9b0769585a94bc')

# Special file suggested by another user on the github
print_gnulinux_builtin_header() {

# Make sure to use \\ instead of \ for continuations
cat <<ENDOFTEXT

#ifndef _GNULINUX_KSH_CMDLIST_H
#define _GNULINUX_KSH_CMDLIST_H

#ifdef __cplusplus
extern "C" {
#endif

/*
 * List builtins for Linux.
 * The list here is partially autogenerated and partially hand-picked
 * based on compatibility with the native GNU coreutils versions of
 * these tools
 */

/* GNU coreutils compatible commands.
 * Be careful, some are in /bin while others are in /usr/bin
 */
#define	ASTCMDLIST(f) \
	{ "/usr/ast/bin/"	#f,	NV_BLTIN|NV_BLTINOPT|NV_NOFREE, bltin(f) },
#define	BINCMDLIST(f)	\
	{ "/bin/"		#f,	NV_BLTIN|NV_BLTINOPT|NV_NOFREE, bltin(f) }, \
	{ "/usr/bin/"		#f,	NV_BLTIN|NV_BLTINOPT|NV_NOFREE, bltin(f) },
/* undo ast_map.h #defines to avoid collision */
#undef basename
#undef chmod
#undef chown
#undef dirname
#undef mkdir
#undef mkfifo
#undef mktemp
#undef readlink
#undef realpath
#undef rmdir


/* Generated data, do not edit. */
BINCMDLIST(basename)
BINCMDLIST(cksum)
BINCMDLIST(comm)
BINCMDLIST(cut)
BINCMDLIST(dirname)
BINCMDLIST(expr)
BINCMDLIST(fold)
BINCMDLIST(join)
BINCMDLIST(logname)
BINCMDLIST(mkdir)
BINCMDLIST(mkfifo)
BINCMDLIST(mktemp)
BINCMDLIST(paste)
BINCMDLIST(pathchk)
BINCMDLIST(rev)
BINCMDLIST(rmdir)
BINCMDLIST(sleep)
BINCMDLIST(sync)
BINCMDLIST(tee)
BINCMDLIST(tty)
BINCMDLIST(uniq)
BINCMDLIST(wc)

/* Mandatory for ksh93 test suite and AST scripts */
BINCMDLIST(getconf)

ASTCMDLIST(basename)
ASTCMDLIST(cat)
ASTCMDLIST(chgrp)
ASTCMDLIST(chmod)
ASTCMDLIST(chown)
ASTCMDLIST(cksum)
ASTCMDLIST(cmp)
ASTCMDLIST(comm)
ASTCMDLIST(cp)
ASTCMDLIST(cut)
ASTCMDLIST(date)
ASTCMDLIST(dirname)
//BINCMDLIST(egrep)
//ASTCMDLIST(egrep)
ASTCMDLIST(expr)
ASTCMDLIST(fds)
//BINCMDLIST(fgrep)
//ASTCMDLIST(fgrep)
ASTCMDLIST(fmt)
ASTCMDLIST(fold)
//BINCMDLIST(grep)
//ASTCMDLIST(grep)
ASTCMDLIST(head)
ASTCMDLIST(id)
//BINCMDLIST(iconv)
//ASTCMDLIST(iconv)
ASTCMDLIST(join)
ASTCMDLIST(ln)
ASTCMDLIST(logname)
//ASTCMDLIST(ls)
ASTCMDLIST(md5sum)
BINCMDLIST(md5sum)
ASTCMDLIST(mkdir)
ASTCMDLIST(mkfifo)
ASTCMDLIST(mktemp)
ASTCMDLIST(mv)
ASTCMDLIST(paste)
ASTCMDLIST(pathchk)
ASTCMDLIST(pids)
//BINCMDLIST(od)
//ASTCMDLIST(od)
//BINCMDLIST(readlink)
//ASTCMDLIST(readlink)
//BINCMDLIST(realpath)
//ASTCMDLIST(realpath)
ASTCMDLIST(rev)
ASTCMDLIST(rm)
ASTCMDLIST(rmdir)
ASTCMDLIST(stty)
//ASTCMDLIST(sha1sum)
//BINCMDLIST(sha1sum)
//ASTCMDLIST(sha256sum)
//BINCMDLIST(sha256sum)
//ASTCMDLIST(sha384sum)
//BINCMDLIST(sha384sum)
//ASTCMDLIST(sha512sum)
//BINCMDLIST(sha512sum)
ASTCMDLIST(sum)
ASTCMDLIST(sync)
ASTCMDLIST(tail)
ASTCMDLIST(tee)
//BINCMDLIST(tr)
//ASTCMDLIST(tr)
ASTCMDLIST(tty)
ASTCMDLIST(uname)
ASTCMDLIST(uniq)
//ASTCMDLIST(vmstate)
ASTCMDLIST(wc)
// ASTCMDLIST(xgrep)
//BINCMDLIST(xargs)
//ASTCMDLIST(xargs)

#ifdef __cplusplus
}
#endif

#endif /* !_GNULINUX_KSH_CMDLIST_H */
ENDOFTEXT
}

prepare() {
  cd "${srcdir}/ksh-${pkgver}"
  patch -p1 -i ../ksh-unc-paths.patch
  export gnu_linux_builtin_header="${PWD}/tmp_gnulinux_builtin_header.h"
  print_gnulinux_builtin_header >"${gnu_linux_builtin_header}"
}

# Things might get a bit messary, prepare yourselves.
# I really should use gisburn's kshrc default config.
build() {
	cd "${srcdir}/ksh-${pkgver}"
  
  export BAST_FLAGS="-DSHOPT_CMDLIB_BLTIN=0 -DSH_CMDLIB_DIR=\\\"/usr/ast/bin\\\" -DSHOPT_CMDLIB_HDR=\\\"${gnu_linux_builtin_header}\\\" -DSHOPT_SYSRC"

  	# For now, it literally fails if cc1.exe is not explicitly on the PATH.
  	local GCC_DIR="$(gcc -print-search-dirs | sed -ne '/^install: /s///p')"
  	export PATH="$PATH:$GCC_DIR"


	# Additional weird workaround.
	export CFLAGS="-I${GCC_DIR}/include -L${GCC_DIR} -L/usr/lib"
	export CCFLAGS="${CFLAGS} -I${scrdir}/ksh-${pkgver} -fno-use-linker-plugin ${BAST_FLAGS} -std=gnu17"
	export LIBRARY_PATH="${GCC_DIR}"

	# What the build system does by default is
	# entirely a shell script system. It sets 'chmod +x' to the script
	# but that does nothing with windows. Need to append
	# shebang at the start.
	sed -i '1s/^/#!\/usr\/bin\/bash\n/' src/cmd/INIT/mamprobe.sh
	sed -i '6s/^/#undef _lib_iconv_open\n/' src/lib/libast/features/iconv # Without this, fails with libiconv installed.

	# My previous attempt at patching the mamake.exe replacement failed. Reason being, is that
	# this build process is highly biased towards unix way of thinking, which doesn't work well with
	# windows. It might kinda work on cygwin, but that fails with msys2. The only successful way so far
	# it's been to build it, is to build it twice. Failure is expected.

	# First round. Note that '|| true' has to be there, it WILL bail the build process when the expected fork() issue
	# happens, so this tells bash to keep going anyways in spite of non zero return code.
	printf "If it reports back fork() error, this is to be expected.\n"
	printf "It will simply run the build command again to finish the job.\n"
	/usr/bin/bash bin/package make PACKAGEROOT="$PWD" CC="/usr/bin/gcc" SHELL="/usr/bin/bash" || true

	sleep 2

	/usr/bin/bash bin/package make PACKAGEROOT="$PWD" CC="/usr/bin/gcc" SHELL="/usr/bin/bash" || true


}

package() {
	cd "${srcdir}"
	install -dm0755 "${pkgdir}/etc/skel"
	install -dm0755 "${pkgdir}/usr/share/ksh"
	install -dm0755 "${pkgdir}/usr/share/doc/ksh"
	install -dm0755 "${pkgdir}/usr/share/licenses/ksh"

	# Install the core components of ksh93
	cd "${srcdir}/ksh-${pkgver}"
	/usr/bin/bash bin/package install CC="/usr/bin/gcc" SHELL="/usr/bin/bash" "${pkgdir}/usr" PACKAGEROOT="$PWD"

	# install ksh sample rc file
	install -Dm644 "${srcdir}/ksh.kshrc" "${pkgdir}/etc/ksh.kshrc"

	# Install copyright and license files
	install -Dm0644 LICENSE.md "${pkgdir}/usr/share/licenses/ksh/LICENSE.md"
	install -Dm0644 COPYRIGHT "${pkgdir}/usr/share/licenses/ksh/COPYRIGHT"

	local _docs
	for _docs in 'builtins.mm' 'COMPATIBILITY' 'DESIGN' 'OBSOLETE' 'PROMO.mm' 'README' 'README-AUDIT.md' \
		'RELEASE' 'RELEASE88' 'RELEASE93' 'sh.memo' 'TYPES'; do
	install -Dm0644 "src/cmd/ksh93/${_docs}" "${pkgdir}/usr/share/doc/ksh/${_docs}"
done

	# Because ksh.exe, like mksh, provided by this package and often people want to specify ksh93,
 	# I will make a copy of of the ksh executable naming it ksh93.exe.
 	cp "${pkgdir}/usr/bin/ksh.exe" "${pkgdir}/usr/bin/ksh93.exe"
   
	# Lastly, move ksh-specific /usr/share/fun to /usr/share/ksh/functions
	mv "${pkgdir}/usr/share/fun" "${pkgdir}/usr/share/ksh/functions"

 	# It was requested to add as well the tests subdir
  	for I in src/cmd/ksh93/tests/*; do
   		install -Dm0644 "$I" "${pkgdir}/usr/share/ksh/tests/$(basename $I)"
	done

 	

}
